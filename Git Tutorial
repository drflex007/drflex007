Installation of Git

EC2 Instance - 2 Instnace ( Mumbai and Singapur region )
Security Group - SSH and HTTP

Command - Sudo su
yum update -y
yun install git -y
git --version 
git config -- global user.name "alok/alok2"
git config -- global user.mail "alok@abc.com)


Git having three stages -
1. Workspace - Get init ( Command used for initilization of git ) ( Story-  Purchasing all the items from grocecry store ) 
2. Staging Area - add ( Command used for adding your code in staging area ) ( Story - using that item which are gonna use in making of the dish )
3. Local repo - commit ( Sanpshot - Incemental backup ) ( Command used for saving your code in local repo ) ( Story - now dish are reday so serve the dish to the people. )

Commit ID - it is used for saving diff version of your code. 
Push - Push are used for pushig the command to any online repo. ( Github - owned by Microsoft and GitLab - Opensource repo ) 
Pull - Pull are used for pulling all the code from online repo. 
Branch - It is creating a tree struture that will help to adding new feature in the code. ( Story - making a dish and pour out some dish from main plate and experiment on that.) 
git init - intitilizing the git 
git add . -  this will add all the cuurent working directory files into staging area.
git commit -m " any random message " - this will commit all the changes in git version control system.
git status - this will show the status of file in the git or this will show files changes stage area.
git  show - this will show all the changes in the files with commit id
git show commit_id = this will show only that changes which commit id's are you mention.
git log --online = it will show all the changes in the git file in one line.
git log --grep "commit"
git branch - it will show cuurnet working branch or all the braches of the tree.
git branch <branch name> - this will create the new branch 
note - master is the main branch in all the tree
git checkout <branch name >  - this will lead you branch which you mention in the agrument.
mearge- you can't merge two branches from diff repositorary. we use pulling mechnasim to merge branches. 
git merge <Branch_name> this will merge current branch to existing branch.

Git Conflict - when you create same name file on diff branch but files content are different or load different manner. 
Example - cat > git_conflict = this is git conflict ( file on master )  and cat > git_conflict = this is second file git conflict ( file on branch1 )
this will create a git conflict. git can't understand which content are first used so that why git conflict occur.

Solution - just open the file any editor and made some changees on it . git will automatically undertand which content are first and which are second.

Note - Every branch local repo push indivisually ( git push commnad only push branch local repo not every branch repo )


Git Stashing- it is a storage which store code or feature in the particular file that you don't want in git production area. 

it is a feature that will give you power to save your unfinished work( Code ) without adding to staging area or commiting.
and work on the new code or new work at workplace area.

Situtation where we use - suppose you are implementing a new feature for your product your code is in last stage and suddenly client esclation came that you have
to work on the new feature. so here you can not commit half of the code on repo and you don't want waste your hour's of hard code , so we use stashing to store this code
aside in the same directary and start working on the new feature as required by client and when your client require feaature are done , just commit that feature and  start 
working on your stashing code. 


Note - you can store many files in the stashing , there is no limit on that. 
Note -before adding your code to stash store,you  have to add the file staging area and commit your code or jsut empty file so git  can recognize your file. 

Commands -
To stash an Item
       git stash 
To see stashed items list 
       git stash  list 
To apply  stashed items
       git stash apply stash@{0}
Then you can git add and git commit.
Note - in stash every files are store in the stack format or array data sturture format.
Note - when getting code from stash it will copy and paste in workplace area not cut and paste.

To clear the stash items
        git stash clear
        
Lab - 
create a demofile - touch demofile
add some content on it - cat > demofile # don't use this code 
First line of code # don't use this code
Ctrl + d # don't use this code

add fie into staging are - git add .
commit file -  git commit - " commit the file "

now add the content to the  file - cat > demofile
First Code
ctrl + d

now stash the current code - git stash 
now see the demofile - cat demofile ( you will file not content is there )

now see git stash list - git stash list 
there you see some content.

now add some content in the demo file -  cat > demofile 
Second code. 

now again the stash the code - git stash
see the file content are clear - cat > demofile 

retrive the code - git stash apply <copy the stash index point exmp- stash@{0} >

see the conntent - cat demofile ( Content are back )

clear stash list - git stash clear ( this will clear all the stash )

Lab done. 

git reset - clear the working area and staging area.
when we don't want to work on the particular code.

git reset . - it will clear the staging area.
git reset -- hard - it will clear all the fles from stagging area and worinng area. 


Git Revert - 
the revert command helps you undo an existing commit.
it does not delete any data in this process rather than git creates a new commit with the included files to the previous state. 
so version control histroy moves forward while your files state moves as a backward stage. 

difference b/w git revert and git reset
git revert - after commit
git reset - before commit

Git revert Lab -
Sudo su
cd mumbaigit 
ls
git status 
cat > newfile 
HI, Final code for app 
git add
git commit -m " Final Code "
git log --oneline
git revert < commit-id >


How to remove untracked files 
git clean -n ( dry run )
git clean -f ( forcefully )

Tags
Tag operation allows giving meaningful names to a specific version  in the repo

To apply tag 
git tag -a < tagname > -m < message > < commit_id >

To see the list of tags 
git tag

To see particular commit content by using tag
git show < Tag Name >

To delete a tag
git tag -d < tagname >

Github Clone

git clone < url of github repo >
it creates a local repo automatically in linux machine the same name as the github account.

